@page "/pagos"
@inject IHttpServicio http

<PageTitle>PAGOS</PageTitle>

<HeadContent>
    <meta name="description" content="Listado de Pagos" />
</HeadContent>

<h3>Lista de Pagos</h3>

<a class="btn btn-primary" href="pagos/crear">Crear Pago</a>

<table>
    <tr>
        <th>Numero de Proveedor</th>
        <th>Descripcion</th>
        <th>Monto</th>
        <th>Tipo de Pago</th>
    </tr>

    @if (Error)
    {
        <tr>@Mensaje</tr>
    }
    else
    {
        @if (pagos == null)
        {
            <tr>Cargando...</tr>
        }
        else if (pagos.Count == 0)
        {
            <tr>No existen pagos.</tr>
        }
        else
        {
            foreach (var item in pagos)
            {
                <tr>
                    <td>@item.ProveedorId</td>
                    <td>@item.Descripcion</td>
                    <td>@item.Monto</td>
                    <td>@item.TipoPago</td>
                    <td>
                        <a class="btn btn-primary"
                           href="pagos/editar/@item.Id">
                            Editar
                        </a>
                    </td>
                    <td>
                        <a class="btn btn-warning"
                        @onclick="()=>Eliminar(item)">
                            Borrar
                        </a>
                    </td>
                </tr>
            }
        }
    }
</table>

<Confirmacion @ref="confirmacion"
              verCancelar="true"
              verOk="true"
              textOk="Aceptar"
              Titulo="Borrar especialidad"
              onCancel="Cancelar"
              onConfirm="Borrar">
    <div>
        <h1>Está por borrar el pago @PagoBorrar.Descripcion</h1>
        <br />
        ¿Está seguro que desea continuar?
    </div>
</Confirmacion>

@code {
    Confirmacion confirmacion;

    List<Pago>? pagos;
    bool Error = false;
    string Mensaje = "";
    Pago PagoBorrar;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        pagos = null;
        var respuesta = await http.Get<List<Pago>>("api/Pagos");
        Error = respuesta.Error;
        if (!respuesta.Error)
        {
            pagos = respuesta.Respuesta;
        }
        else
        {
            Mensaje = await respuesta.ObtenerError();
        }
    }

    private void Cancelar()
    {
        confirmacion.Ocultar();
        PagoBorrar = null;
    }

    private async Task Eliminar(Pago pagoBorrar)
    {
        PagoBorrar = pagoBorrar;
        confirmacion.Ver();
    }

    private async Task Borrar()
    {
        var respuesta = await http.Delete($"api/pagos/{PagoBorrar.Id}");
        if (respuesta.Error)
        {
            var body = "Error, no se puede borrar el pago";
        }

        Cancelar();
        await Leer();
    }
}
